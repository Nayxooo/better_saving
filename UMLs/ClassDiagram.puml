@startuml Backup Job Manager Class Diagram

' Define styles
skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

skinparam package {
  BackgroundColor LightGray
  BorderColor Gray
}

title "Backup Job Manager Class Diagram"

' MVVM Packages
package "Models" {
  class Backup {
    + {static} backupFile(sourceFilePath: string, targetFilePath: string): int
  }

  class BackupJob {
    + Name: string
    + SourceDirectory: string
    + TargetDirectory: string
    + Type: JobType
    + State: JobStates
    + Progress: double
    + TotalFilesToCopy: int
    + TotalFilesCopied: int
    + ErrorMessage: string
    + {static} LoadJobs(logger: Logger): List<BackupJob>
    + {static} SaveJobs(jobs: IEnumerable<BackupJob>, logger: Logger)
    + Start(cancellationToken: CancellationToken, progressCallback: IProgress<double>): Task
    + Pause()
    + Resume()
    + Stop()
  }

  enum JobType {
    Full
    Diff
  }

  enum JobStates {
    Working
    Finished
    Stopped
    Failed
    Idle
  }

  class Hashing {
    + {static} GetFileHash(filePath: string): string
    + {static} CompareFiles(filePath1: string, filePath2: string): bool
  }

  class Logger {
    - LogDirectory: string
    - DailyLogFilePath: string
    - StateLogFilePath: string
    - {static} logLock: object
    - _jobProvider: Func<IEnumerable<BackupJob>>
    + Logger()
    + SetJobProvider(jobProvider: Func<IEnumerable<BackupJob>>)
    + GetLogDirectoryPath(): string
    + Log(jobName: string, source: string, target: string, fileSize: long, transferTimeMs: int)
    + LogError(jobName: string, error: string)
    + LogState()
    + LoadState(): IEnumerable<BackupJob>
    + GetTodaysLogEntries(): IEnumerable<LogEntry>
  }

  class LogEntry {
    + Timestamp: DateTime
    + JobName: string
    + Source: string
    + Target: string
    + FileSize: long
    + TransferTimeMs: int
    + Error: string
  }
}

package "ViewModels" {
  class ViewModelBase <<abstract>> {
    # {event} PropertyChanged: PropertyChangedEventHandler
    # SetProperty<T>(field: ref T, value: T, propertyName: string): bool
    # OnPropertyChanged(propertyName: string)
  }

  class MainViewModel extends ViewModelBase {
    - _listVM: BackupListViewModel
    - _currentView: ViewModelBase
    - _blockedSoftware: List<string>
    - _runningBlockedSoftware: string
    - _selectedLanguage: string
    + ListVM: BackupListViewModel
    + CurrentView: ViewModelBase
    + ShowCreateJobViewCommand: ICommand
    + ShowSettingsViewCommand: ICommand
    + ChangeLanguageCommand: ICommand
    + SelectedLanguage: string
    + MainViewModel()
    + GetBlockedSoftware(): List<string>
    + SetBlockedSoftware(softwareList: List<string>)
    + CheckForBlockedSoftware(): Task
    + LoadSettings()
    + SaveSettings()
    + ChangeLanguage(languageCode: string)
  }

  class BackupListViewModel extends ViewModelBase {
    - _mainViewModel: MainViewModel
    - _isAlphabeticalSort: bool
    - _jobs: ObservableCollection<BackupJob>
    - _logger: Logger
    - _errorMessage: string
    + Jobs: ObservableCollection<BackupJob>
    + ErrorMessage: string
    + CreateJobCommand: ICommand
    + StartAllJobsCommand: ICommand
    + FilterJobsCommand: ICommand
    + ShowJobDetailsCommand: ICommand
    + BackupListViewModel(mainViewModel: MainViewModel)
    + LoadJobs()
    + AddJob(job: BackupJob)
    + StartAllJobs()
    + SortJobs()
    + GetLogger(): Logger
  }

  class BackupCreationViewModel extends ViewModelBase {
    - _mainViewModel: MainViewModel
    - _name: string
    - _sourceDirectory: string
    - _targetDirectory: string
    - _isFullBackup: bool
    - _isDiffBackup: bool
    + Name: string
    + SourceDirectory: string
    + TargetDirectory: string
    + IsFullBackup: bool
    + IsDiffBackup: bool
    + CreateCommand: ICommand
    + CancelCommand: ICommand
    + SelectSourceDirectoryCommand: ICommand
    + SelectTargetDirectoryCommand: ICommand
    + BackupCreationViewModel(mainViewModel: MainViewModel)
  }

  class BackupStatusViewModel extends ViewModelBase {
    - _mainViewModel: MainViewModel
    - _job: BackupJob
    - _cancellationTokenSource: CancellationTokenSource
    + JobName: string
    + SourceDirectory: string
    + TargetDirectory: string
    + JobType: string
    + JobProgress: double
    + TotalFilesToCopy: int
    + TotalFilesCopied: int
    + JobState: string
    + ErrorMessage: string
    + DeleteJobCommand: ICommand
    + PauseResumeJobCommand: ICommand
    + BackupStatusViewModel(job: BackupJob, mainViewModel: MainViewModel)
    - UpdateProperties()
    - DeleteJob()
    - PauseResumeJob()
    + Cleanup()
  }

  class SettingsViewModel extends ViewModelBase {
    - _mainVM: MainViewModel
    - _blockedSoftwareText: string
    - _fileExtensionsText: string
    + BlockedSoftwareText: string
    + FileExtensionsText: string
    + SaveCommand: ICommand
    + CancelCommand: ICommand
    + SetLanguageCommand: ICommand
    + SettingsViewModel(mainVM: MainViewModel)
    - Save()
    - Cancel()
  }

  class RelayCommand implements ICommand {
    - _execute: Action<object>
    - _canExecute: Func<object, bool>
    + RelayCommand(execute: Action<object>, canExecute: Func<object, bool>)
    + {event} CanExecuteChanged: EventHandler
    + CanExecute(parameter: object): bool
    + Execute(parameter: object)
    + RaiseCanExecuteChanged()
  }
}

package "Views" {
  class MainWindow {
  }
  class BackupListView {
  }
  class BackupCreationView {
  }
  class BackupStatusView {
  }
}

package "Converters" {
  class NullOrEmptyToVisibilityConverter implements IValueConverter {
    + Convert(value: object, targetType: Type, parameter: object, culture: CultureInfo): object
    + ConvertBack(value: object, targetType: Type, parameter: object, culture: CultureInfo): object
  }
}

package "Application" {
 class App {
    + {static} LoadLanguageDictionary(cultureName: string)
 }
}

' Relationships
MainViewModel --> BackupListViewModel : uses >
MainViewModel --> ViewModelBase : currentView
MainViewModel --> SettingsViewModel : uses >
MainViewModel --> BackupCreationViewModel : uses >
MainViewModel --> BackupStatusViewModel : uses >

BackupListViewModel --> BackupJob : displays <
BackupListViewModel --> MainViewModel : notifies <
BackupListViewModel --> Logger : uses >

BackupCreationViewModel --> MainViewModel : notifies <
BackupCreationViewModel --> BackupJob : creates >

BackupStatusViewModel --> BackupJob : displays <
BackupStatusViewModel --> MainViewModel : notifies <

SettingsViewModel --> MainViewModel : notifies <

BackupJob --> JobType
BackupJob --> JobStates
BackupJob --> Hashing : uses >
BackupJob --> Backup : uses >
BackupJob ..> Logger : (persisted by)

Logger --> BackupJob : (loads/saves state of)
Logger --> LogEntry : creates >

MainWindow --> MainViewModel : DataContext

BackupListView ..> BackupListViewModel : DataContext
BackupCreationView ..> BackupCreationViewModel : DataContext
BackupStatusView ..> BackupStatusViewModel : DataContext

App ..> MainViewModel : (indirectly, via MainWindow)

ViewModelBase <|-- MainViewModel
ViewModelBase <|-- BackupListViewModel
ViewModelBase <|-- BackupCreationViewModel
ViewModelBase <|-- BackupStatusViewModel
ViewModelBase <|-- SettingsViewModel

ICommand <|.. RelayCommand
IValueConverter <|.. NullOrEmptyToVisibilityConverter

@enduml