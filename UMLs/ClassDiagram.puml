@startuml Backup Job Manager Class Diagram

' Define styles
skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

skinparam package {
  BackgroundColor LightGray
  BorderColor Gray
}

title "Backup Job Manager Class Diagram"

' MVVM Packages
package "Model" {
  enum JobType {
    Full
    Diff
  }
  
  enum jobState {
    Working
    Finished
    Stopped
    Failed
    Idle
  }
  
  class backupJob {
    - String name
    - String sourceDirectory
    - String targetDirectory
    - JobType type
    - int maxThreads
    - Logger logger
    - jobState state
    - int progress
    - int totalFilesToCopy
    - int remainingFiles
    - String errorMessage
    + backupJob(name, sourceDir, targetDir, type, maxThreads, logger)
    + String GetName()
    + String GetSourceDirectory()
    + String GetTargetDirectory()
    + JobType GetJobType()
    + jobState GetState()
    + int GetProgress()
    + int GetTotalFilesToCopy()
    + int GetNumberFilesLeftToDo()
    + String GetErrorMessage()
    + Task ExecuteAsync(CancellationToken)
    + String ToString()
  }
  
  class Backup {
    + static Task CopyFileAsync(String, String, CancellationToken)
    + static Task BackupFilesAsync(String, String, List<String>, CancellationToken, backupJob)
  }
  
  class hash {
    + static String GetFileHash(String)
    + static bool CompareFileHash(String, String)
  }
  
  class Logger {
    - String logDirectory
    - String dailyLogFilePath
    - String stateLogFilePath
    - Object logLock
    + Logger(String)
    + void Log(String)
    + void LogError(String, Exception)
    + void UpdateAllJobsState()
  }
}

package "View" {
  enum ConsoleMenu {
    MainMenu
    Language
    CreateJob
    ShowJob
    StartJob
    StopJob
    DeleteJob
    Exit
  }
  
  class ConsoleInterface {
    - MainViewModel mainViewModel
    - String Language
    - Logger logger
    - ConsoleMenu currentMenu
    - Dictionary<String, Dictionary<String, String>> uiText
    + static void Initialize(Logger, MainViewModel)
    - static void InitializeLanguages()
    + static void Start()
    - static String GetText(String)
    - static void ShowMainMenu()
    - static void RequestExit()
    - static String GetProgressBar(int, int, int)
    - static void SetLanguageDialog()
    - static void CreateJobDialog()
    - static void ListJobsDialog()
    - static void ShowJob(String)
    - static void DisplayMessage(String)
    - static String NormalizePath(String)
    - static Attribute GetStateColor(jobState)
    - static bool IsInMenu(ConsoleMenu)
    - static String GetMenuTitle()
  }
}

package "ViewModel" {
  class MainViewModel {
    + ObservableCollection<BackupJobViewModel> BackupJobs { get; }
    + ICommand CreateJobCommand { get; }
    + ICommand StartJobCommand { get; }
    + ICommand StopJobCommand { get; }
    + ICommand DeleteJobCommand { get; }
    + ICommand StartAllJobsCommand { get; }
    + Logger ApplicationLogger { get; }
    + MainViewModel(Logger)
    + void LoadBackupJobs()
    - void CreateBackupJob(params)
    - void StartJob(BackupJobViewModel)
    - void StopJob(BackupJobViewModel)
    - void DeleteJob(BackupJobViewModel)
    - void StartAllJobs()
    + event PropertyChangedEventHandler PropertyChanged
  }

  class BackupJobViewModel {
    - backupJob _backupJobModel
    + string Name { get; set; }
    + string SourceDirectory { get; set; }
    + string TargetDirectory { get; set; }
    + JobType Type { get; set; }
    + jobState State { get; }
    + int Progress { get; }
    + string ErrorMessage { get; }
    + ICommand StartCommand { get; }
    + ICommand StopCommand { get; }
    + BackupJobViewModel(backupJob)
    + void UpdateState(jobState, int, string)
    + event PropertyChangedEventHandler PropertyChanged
  }
}

' Relationships
' MVVM Pattern Relationships
View ..> ViewModel : interacts with / binds to >
ViewModel ..> Model : manages / updates >
Model ..> ViewModel : notifies of changes > ' (Implicitly, via events or INotifyPropertyChanged)

' Specific Relationships
MainViewModel --> BackupJobViewModel : aggregates / manages
MainViewModel --> Logger : uses
ConsoleInterface --> MainViewModel : uses / interacts with
BackupJobViewModel --> backupJob : wraps / exposes
backupJob --> JobType : has
backupJob --> jobState : has state
backupJob --> Backup : uses
backupJob --> Logger : uses for logging
Backup ..> hash : uses for differentials

@enduml